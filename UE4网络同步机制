一 UE4网络同步机制

1，UE4中有哪些同步机制？？
(1) Actor Replication (最基本的复制单位)
(2) Property Replication (属性同步)
(3) Function Call Replication (函数调用复制--RPC)
(4) Actor Component Replication (Actor 组件复制)
(5) Generatic SubObject Replication (UObject 复制)


2,UE4有哪些服务器模式？
(1) Listen Server:监听服务器，即局域网内进行本地游戏，此时本地机器即是客户端，也是服务器

(2) 独立服务器，即Dedicated Server，简称DS,也叫做专用服务器，此时它的功能纯粹作为服务器，不进行渲染功能，只执行服务器逻辑，默认情况下连界面都没有，除非在在启动参数加入-log

注意：

游戏中的数据都是由服务器来同步给客户端，不同客户端之间是没有直接交互的，必须通过服务器告知，客户端的数据都是通过服务器来校准，网络好的客户端，数据更接近服务器，网络差的客户端，数据差异

更大，客户端发信息给服务器，只有一种方式，那就是通过RPC-Server一种方式，除此无它！

二 各种同步机制详解：

1 Actor Replication：

Actor是UE4 网络传输的基本单位，RPC,Property，或者Actor Component复制，都是得在Actor中执行，不得脱离Actor，所以说Actor是网络复制的基本单位，当Actor发生变化时，引擎会在预设时间内
对该Actor进行同步，从而使得拥有该Actor的所有客户端，得到同步，但是一般来说，UE4并不知道，哪些Actor，需要复制，因为默认是关闭复制的（复制需要消耗带宽），所以需要手动打开复制属性，

两种方式打开Actor的复制属性：
（1）c++方式：
属性：bReplicates 赋值为1 即可

(2)蓝图方式：
属性面板，勾上Replicates属性，即可

问题，如何让Actor，只同步给部分玩家，比如只同步给拥有者，只同步给一定距离范围内的玩家，只同步给付费玩家？

涉及到一个概念：network relavant概念，即网络相关性，作用？：通过指定网络相关性，比如bOnlyRelavantToOwner变量设置为true，那么Actor就只同步给拥有该Actor的玩家,而其他的玩家不会

得到同步！也就是说，只有当Actor设置为Relavant 服务器，跟服务器相关，才会得到服务器的同步！

如果想要属性只同步给一定距离范围内的玩家？可以通过设置属性Actor::NetCullDistanceSquared，设置裁剪距离，也就是在此距离范围内的玩家，都会得到同步更新，超过范围的玩家，不生效

如果想要只同步给特定条件的玩家，比如付费玩家呢？没有具体的变量可以设置，但是可以通过重载一个函数，override IsNetRelavantFor 函数，设置条件，从而达到目的



2 Propery Replication

属性复制：当把Actor的Replicates属性设置为true后，并不是所有属性都会同步复制，而是要通过指定哪些属性需要复制，服务器才会进行同步，属性复制有两种方式：

（1）当属性发生变化时，服务器直接同步给客户端，

c++:

UPROPERTY(EditAnywhere,BlueprintReadWrite,Replicated,Category = Health)
float health = 0.0;

蓝图：在属性面板，将Replication属性，设置为Replicated即可

(2)第二种，服务器同步属性给客户端时，还会触发On_Rep()函数，c++ 和蓝图，处理方式不一样：

c++：
当属性在服务器上发生变化的时候，客户端会自动触发On_Rep()函数，无需手动调用，而如果是在服务端，则需要手动调用On_Rep()函数，在函数声明中，需要加入Replicated_Using关键字，此时的
On_Rep()函数，就只会在服务端去调用，此种情况，用于客户端发消息给服务端，同步服务端的数据，即把客户端的数据同步给服务端，声明方式如下：

客户端：
UFUNCTION()
void OnRep_Score();即可

服务端：
UPROPERTY(Replicated_Using = OnRep_Score)
float Score;

UFUNCTION()
void OnRep_Score();

蓝图：

把属性的Replication属性设置为RepNotify,同时，需要声明一个函数：OnRep_Score函数

注意：
在c++中设置属性同步时，不管是在客户端，还是服务端操作，都需要设置属性的Lifetime，设置Lifetime，就是重载Actor::GetLiftTimeReplicatedPros函数，这个函数会在类的第一个实例调用，
是第一个实例初始化调用，而不是每个实例初始化调用，也就是说这个LifeTime的设置是基于类本身，而不是实例本身！！

代码如下：

头文件函数声明：

virtual void GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const override;

cpp文件函数实现:

void AFPSCharacter::GetLifetimeReplicatedProps(TArray<FLifetimeProperty>& OutLifetimeProps) const
{
	Super:GetLifetimeReplicatedProps(OutLifetimeProps);
	//DOREPLIFETIME_CONDITION(this,Score,COND_OwnerOnly);
	DOREPLIFETIME_CONDITION(AFPSCharacter,Score,COND_OwnerOnly);
}

LifeTime的作用？？？

LifeTime的作用是用来进行条件复制，使得属性只能同步给部分客户端，可以节省带宽！！另一个防止玩家作弊！！同时，属性的复制是在Actor包里面复制，也就是要根据Actor复制范围进行复制，
如果Actor是只同步给自己，而属性复制是同步给所有玩家，那么属性复制只能同步给自己，按照Actor的复制范围进行同步！！

条件复制是处于静态生存期，也可以根据程序实时改变生产期，在Actor::PreReplication函数使用DOREPLIFETIME_ACTIVE_OVERRIDE来实现！


3 Function Call Replication (即RPC),远程过程调用

（1）啥是远程过程调用？？

利用网络手段，将函数的执行和调用分开！比如函数可以在Client调用，而执行代码在Server上面，也可以反过来

（2）什么是Authority??

Authority，即为主控端，啥叫主控方？？？简单理解就是控制一方！一般而言，游戏的数据都是由服务器同步给客户端，也就是说服务器对这些数据具有控制权，客户端的数据通过服务器来同步的，比如

游戏的状态，游戏规则，以及需要同步的数据，都是由服务器控制同步，所以服务器就具有Authority！但不是所有的数据，服务器都是Authority，比如一些UI界面，还有只在客户端表现的效果，如特效，

那么，本地客户端就具有Authority，要看谁是这个Actor的Authority，就看服务器是否拥有它，如果没有，那么Client就是这个Actor的Authority！，一般情况下，我们把拥有Authority的对象看作

是服务器，否则看作是Client

蓝图中，通过SwitchHasAuthority，判断是否拥有Authority

c++:

	if (this->Role<ROLE_Authority)
	{
	}


UENUM()
enum ENetRole
{
    /** No role at all. */
    ROLE_None,
    /** Locally simulated proxy of this actor. */
    ROLE_SimulatedProxy,
    /** Locally autonomous proxy of this actor. */
    ROLE_AutonomousProxy,
    /** Authoritative control over the actor. */
    ROLE_Authority,
    ROLE_MAX,
};

ROLE_None：表示不扮演任何网络角色，不参与同步

ROLE_SimulatedProxy：表示是远程机器上的一个复制品，可以接受服务器同步的属性，但是不能改变真正Actor的属性

ROLE_AutonomousProxy：表示既可以作为一个复制品，又可以通过RPC(Server形式)，修改真正Actor的属性！！

ROLE_Authority：表示拥有Authority，一般是服务器，也可以是Client


（3）有几种RPC?

RPC总共有三种，即Client，Server,Muticast，区别？？

Client：表示服务器调用，但是客户端执行，也就是说在服务器调用该函数，但是该函数的代码在客户端去执行的，即角色为Role_Authority的角色调用，Role_AuthonomousProxy的角色执行代码

Server:表示客户端调用，但是代码是在服务端执行，这种RPC方式可以用来，客户端调用服务端的函数，从而修改服务器上的属性值，一般服务器的网络角色为Role_Authority，而客户端分为两种：

1，Role_SimulatedProxy，这种只能接受服务器同步属性，而不能给服务器发送消息；2 Role_AutonomousProxy，这种角色既可以接受服务器的属性同步，又可以调用Server函数，让服务器执行一段
代码，从而达到修改服务器上数据的目的，比如修改生命值，得分，坐标。

Muticast：服务器调用，服务器和Client同时执行代码！


蓝图中设置RPC： Not Replicated，Run On Server，Run On owing Actor，Muticast

c++中设置RPC:

Client函数：

UFUNCTION(reliable,Client)
	void ClientSetScore();
  
Server函数声明：

	UFUNCTION(unreliable,Server)
	void ServerSetScore();
  
 NetMulticast函数声明：
 
 UFUNCTION(NetMulticast)
	void NetMulticastSetScore();

对于Server函数，RPC 函数的声明，需要加尾缀_Impementation,

void AFPSCharacter::ServerSetScore_Implementation()
{

}

void AFPSCharacter::SetScoreValue()
{      if (this->Role < ROLE_Authority)
     {
          ServerSetScore();
      }
       //implement character fly up
        //.......  
 } 

上述代码，SetScoreValue函数中，在Client调用了Server函数（ServerSetScore）

参数reliable 和 unreliable？

reliable：相当于TCP传输，可靠，必达，缺点是速度慢，
unreliable：相当于UDP传输，不可靠，网络不好可能到达不了，优点的速度快


4  Actor Component Replicated，组件复制

UE4支持Actor的组件复制，但是在UE4中运用的却不多，组件的属性修改基本都是通过组件的Server函数来实现，很少情况下才需要在逻辑代码中直接修改Component的属性，或者动态增/删组件。

Component作为Actor的一部分进行复制，Actor 仍然掌管角色、优先级、相关性、剔除等方面的工作。一旦复制了 Actor，它就可以复制自身的Component。

这些组件可以按 Actor 的方式复制属性和RPC（至于Component为什么能调用RPC函数，后面会有解释）。Component必须以 Actor 的方式来实施::GetLifetimeReplicatedProps函数。

组件复制中涉及两大类组件。一种是随 Actor一起创建的静态组件。也就是说，在客户端或服务器上生成所属Actor时，这些组件也会同时生成，与组件是否被复制无关。

服务器不会告知客户端显式生成这些组件。 在此背景下，静态组件是作为默认子对象在 C++ 构造函数中创建，或是在蓝图编辑器的组件模式中创建。静态组件无需通过复制存在于客户端；

它们将默认存在。只有在属性或事件需要在服务器和客户端之间自动同步时，才需要进行复制。动态组件是在运行时在服务器上生成的组件种，其创建和删除操作也将被复制到客户端。

它们的运行方式与 Actor 极为一致。与静态组件不同， 动态组件需通过复制的方式存在于所有客户端。另外，客户端可以生成自己的本地非复制组件。这适合于很多种情形。

只有当那些在服务器上触发的属性或事件需要自动同步到客户端时，才会出现复制行为。在组件上设置属性和 RPC 的过程与 Actor 并无区别。将一个类设置为具有复本后，

这些组件的实际实例也必须经过设置后才能复制。在C++中进行组件复制，只需调用 AActorComponent::SetIsReplicated(true) 即可。

如果需要复制的组件是一个默认子对象，就应当在生成组件之后通过类构造函数来完成此调用。例如：（注意：真正的ACharacter不是这样实现的）



5 Generic Subobject Replication
其实，UE4还可以复制任意的UObject对象，UObject对象还可以嵌套其他的UObject对象，而且UObject还可以设置RPC和同步属性，功能大致和Actor一致。

但是需要注意的是，UObject必须最终被包含在Actor中。只有Actor进行同步时，SubObject才能被同步。首先应该Override UObject::IsSupportedForNetorking



